#+TITLE: 编译原理复习笔记
#+DATE: 2018-01-07
#+SETUPFILE: ~/blog/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: review
#+JEKYLL_TAGS: exam
#+JEKYLL_PUBLISHED: true

* 编译概述
-----
** 语言处理程序
- *定义* 使计算机能理解人们提供的命令与输入的程序
| 分类     | 输入                   | 输出                                       |
|----------+------------------------+--------------------------------------------|
| 解释程序 | 用计算机语言编写的程序 | (执行该程序蕴含的运算)                     |
| 翻译程序 | (同上)                 | 目标语言（某个计算机的机器语言）编写的程序 |
- *编译系统* 编译程序与运行系统的合称
- *交叉编译* 编译过程与编译输出的目标程序的执行在不同机器上完成时，这种编译称之
** 编译程序的逻辑结构
#+BEGIN_EXPORT html
<img src="/images/compiler1.png" alt="Drawing" width="400px" />
#+END_EXPORT
** 词法分析
 分析源程序的结构，判断是否为相应程序中的一个合法程序
** 语义分析
 规定各语法成分的含义或功能（规定它们的属性或在程序执行时应进行的运算及操作，语法检查）
** 中间代码生成
*好处* 处理上方便，便于优化移植
** 代码优化
*原因* 上述阶段较多的考虑语法与语义上的共性，而对源程序间出现的差异考虑较少，所以代码效率较低
** 目标代码生成
- *目的* 接受中间代码，将其翻译为机器语言或汇编语言形式的目标程序
- *要求* 生成代码尽可能短；充分发挥计算机可用资源的效率
*目标代码的三种形式*
- 具有绝对地址的机器指令代码
- 汇编语言形式的目标程序
- 模块结构的机器代码
** 错误检查和处理程序
报告错误的种类，出现的位置以及一定的纠错能力
** 信息表管理
*三类数据*
- 编译程序带有的局部程序
- 源程序正文的各种中间表示
- 含有表示程序正文中上下文依赖关系的信息表格
** 编译程序的组织
*多遍扫描的优点* 
- 采用模块结构，各遍功能独立，整个编译程序结构比较清晰
- 多次扫描加工，有利于优化
- 按模块逐次调入内存，有利于复盖技术的采用
-----
* 文法和语言
-----
*三种定义语言的方法*
- 枚举法
- 文法：定义有限条规则，来产生所需描述的语言中全部的句子
- 自动机
| 概念   | 定义                                           |
|--------+------------------------------------------------|
| 字母表 | 若干元素组成的有限非空集合，每个元素称之为符号 |
| 字符串 | 由字母表中符号组成的任何有限序列               |
** 文法定义
G[S]=(V_N ,V_T ,P,S)
| 符号 | 定义       |
|------+------------|
| V_N  | 非终结符集 |
| V_T  | 终结符集   |
| P    | 产生式集   |
| S    | 开始符号   |
** 文法和语言的关系
一个文法产生唯一的语言，但一个语言可由若干个不同的文法表示
** 句型的分析
- *左句型* 能由最左推导推导出的句型成为左句型，同理可得右句型
- *最右推导* 被称为 *规范推导*
- 由规范推导推导出的句型称为 *规范句型*
*** 语法树和二义性
1. *语法树* 可以用来表示一个文法所描述语言的句型结构
2. 如果一个文法所描述语言的某个句子对应不止一棵语法树，则成该文法为 *二义性文法* 
3. LL(1),LR(0)文法都是无二义性文法，若一个文法含有既是左递归又是右递归的非终结符，则该文法是二义性文法
+ 一个句型的最左直接短语称为此句型的句柄 
** 文法简化和改造
*** 无用符号及无用产生式的消除
*** 单产生式的消除
** 文法和语言的乔姆斯基分类
*** 0型文法或短语结构文法PSG(0型语言)
对产生式不加任何限制
*** 1型文法或前后文有关文法CSG(1型语言)
所有产生式
#+BEGIN_EXPORT latex
\( \alpha \to \beta,|\alpha|\le|\beta| \)
#+END_EXPORT
\( \alpha \to \beta,|\alpha|\le|\beta| \)
*** 2型文法或前后文无关文法CFG(2型语言)
\( A \to \beta,A \in V_N ,\beta \in V^+ \)  
*** 3型文法或正规文法（左线性文法和右线性文法）
